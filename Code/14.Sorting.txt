_______________________________________________________________________BubbleSort_____________________________________________
public class IF_Examples {
    static void bubblesort(int[] arr){
        int n = arr.length;
        int temp = 0;
        for(int i =0; i<n; i++){
            for (int j=1;j<(n-i); j++){
                if(arr[j-1]> arr[j]){
                    temp = arr[j-1];
                    arr[j-1] = arr[j];
                    arr[j] = temp;
                }
            }
        }
    }
public static void main(String args[]){
        int arr[] = {34,56,33,5621,226,99};
    System.out.println("Array before bubble sort");
    for (int i = 0; i<arr.length; i++){
        System.out.println(arr[i]);
    }
    System.out.println();
    System.out.println("Array after bubble sort");
    bubblesort(arr);
    for(int i=0; i<arr.length; i++){
        System.out.println(arr[i]+" ");
    }
}
}
---------------------------------------------------------------------------------------------------------------------------------
                                                           INSERTION SORT 
import org.w3c.dom.ls.LSOutput;

public class IF_Examples{
    public static void sort(int [] elements){
        for(int i = 1;i<elements.length; i++){
            int elementToSort = elements[i];
            int j = i;
            while (j>0 && elementToSort < elements[j-1]){
                elements[j] = elements[j-1];
                j--;
            }
            elements[j] = elementToSort;
        }
    }

public static void main(String args[]){
    int arr[] = {3,42,55,51,22};
    System.out.println("Before soring ");
    for(int i = 0; i<arr.length; i++)
        System.out.println(arr[i]);

    System.out.println();
    System.out.println("After Insertion Sort");
    sort(arr);
    for(int i = 0; i<arr.length; i++)
        System.out.println(arr[i]+ " ");

    }
}
-------------------------------------------------------------------------------------------------------------------------------------
___________________________________________________________ MERGE SORT ______________________________________________________________
import java.util.Scanner;
public class IF_Examples {
    void merge(int arr[], int l, int m,int r){
        int n1 = m - l + 1;
        int n2 = r - m;

        int L[] = new int[n1];
        int R[] = new int[n2];
        for(int i = 0; i<n1; i++)
            L[i] = arr[l+i];
        for(int j = 0;j<n2; j++)
            R[j] = arr[m + 1 + j];
        int i = 0, j = 0;

        int k = l;
        while (i<n1 && j <n2){
            if(L[i] <= R[j]){
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i<n1){
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j<n2){
            arr[k] = R[j];
            j++;
            k++;
        }
    }
void sort(int arr[], int l, int r){
        if(l<r){
            int m = l+(r-l)/2;
            sort(arr,l,m);
            sort(arr,m+1,r);
            merge(arr,l,m,r);
        }
}
static void printarray(int arr[]){
        int n = arr.length;
        for(int i = 0;i<n; i++)
            System.out.println(arr[i]+ " ");
        System.out.println();
}
public static void main(String args[]){
        int arr[] = {12,44,556,321,110};
    System.out.println("Given Array");
    printarray(arr);
    IF_Examples ob = new IF_Examples();
    ob.sort(arr,0,arr.length - 1);
    System.out.println("\n Sorted Array");
    printarray(arr);
}
}
----------------------------------------------------------------- QUICK SORT ---------------------------------------------------------

import java.util.Scanner;
public class IF_Examples {
    static void swap(int [] arr, int i, int j){
    int temp ;
    temp  = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
    }
    static int partition(int [] arr, int low, int high){
        int pivot = arr[high];
        int i = (low-1);
        for(int j = low; j<=high-1; j++){
            if(arr[j]<pivot){
                i++;
                swap(arr,i,j);
            }
        }
        swap(arr,i+1,high);
        return (i +1);
    }
    static void quicksort(int []arr, int low, int high){
        if(low <high){
            int pi = partition(arr,low,high);
            quicksort(arr,low,pi-1);
            quicksort(arr,pi+1,high);

        }
    }
    static void printarray(int []arr, int size){
        for(int i = 0; i<size; i++)
            System.out.println(arr[i]+" ");
        System.out.println();
    }
    public static void main(String[] args){
        int [] arr = {12,23,98,210,55,34,223,910};
        int n = arr.length;
        quicksort(arr,0,n-1);
        System.out.println("Sorted array");
        printarray(arr,n);
    }
}
----------------------------------------------------------- SELECTION SORT---------------------------------------------------------

class Scratch {
    void sort(int arr[]){
        int n = arr.length;
        for(int i = 0; i< n-1;i++){
            int min_idx = i;
            for(int j = i+1; j<n; j++)
                if(arr[j]<arr[min_idx])
                    min_idx =j;


            int temp = arr[min_idx];
            arr[min_idx]= arr[i];
            arr[i]= temp;
        }
    }
    void print(int arr[]){
        int n = arr.length;
        for(int i = 0; i<n; i++)
            System.out.println(arr[i]+" ");
        System.out.println();
    }
    public static void main(String[] args) {
     Scratch ob = new Scratch();
     int arr[]= {1,234,21,45,39};
     ob.sort(arr);
     System.out.println("ARRAY AFTER SORT");
     ob.print(arr);
    }
}
